#pragma once
#include "Common.h"

class Solution
{
public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        unordered_set<int> initialSet(initial.begin(), initial.end());
        vector<unordered_set<int>> lookup(n);
        vector<bool> visited(n);
        for (int i = 0; i < n; i++)
        {
            unordered_set<int> normal;
            unordered_set<int> special;
            dfs(i, graph, initialSet, visited, normal, special);
            for (auto x : normal)
            {
                for (auto y : special)
                {
                    lookup[x].emplace(y);
                }
            }
        }
        unordered_map<int, int> temp;
        int max = 0;
        int result = *min_element(initial.begin(), initial.end());
        for (int i = 0; i < n; i++)
        {
            if (lookup[i].size() == 1)
            {
                int index = *lookup[i].begin();
                temp[index]++;
                if (temp[index] > max)
                {
                    result = index;
                    max = temp[index];
                }
                else if (temp[index] == max)
                {
                    result = min(result, index);
                }
            }
        }
        return result;
    }

private:
    void dfs(int node, const vector<vector<int>> &graph, const unordered_set<int> &inital, vector<bool> &visited, unordered_set<int>& normal, unordered_set<int>& special)
    {
        if (visited[node])
            return;

        if (auto it = inital.find(node); it != inital.end())
        {
            special.emplace(node);
            return;
        }

        visited[node] = true;
        normal.emplace(node);
        int n = graph.size();
        for (int i = 0; i < n; i++)
        {
            if (graph[node][i] == 1)
            {
                dfs(i, graph, inital, visited, normal, special);
            }
        }
    }
};

class LeetCodeTest : public testing::Test
{
public:
    inline static Solution solution;
};

TEST_F(LeetCodeTest, Example1)
{
    vector<vector<int>> graph = {
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1},
    };
    vector<int> initial = {0, 1};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 0);
}

TEST_F(LeetCodeTest, Example2)
{
    vector<vector<int>> graph = {
        {1, 1, 0},
        {1, 1, 1},
        {0, 1, 1},
    };
    vector<int> initial = {0, 1};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 1);
}

TEST_F(LeetCodeTest, Example3)
{
    vector<vector<int>> graph = {
        {1, 1, 0, 0},
        {1, 1, 1, 0},
        {0, 1, 1, 1},
        {0, 0, 1, 1},
    };
    vector<int> initial = {0, 1};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 1);
}

TEST_F(LeetCodeTest, Failure1)
{
    vector<vector<int>> graph = {
        {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
        {0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 1, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
        {0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
    };
    vector<int> initial = {2, 1, 9};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 9);
}