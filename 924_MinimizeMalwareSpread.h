#pragma once
#include "Common.h"

class Solution
{
public:
    int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial)
    {
        int n = graph.size();
        vector<bool> visited(n);
        int max = 0;
        int result = n - 1;
        for (int i = 0; i < initial.size(); i++)
        {
            int reduce = 0;
            if (!visited[initial[i]])
            {
                unordered_set<int> connectedNodes = dfs(initial[i], visited, graph);
                reduce = connectedNodes.size();
                for (int j = i + 1; j < initial.size(); j++)
                {
                    if (connectedNodes.count(initial[j]) != 0)
                    {
                        reduce = 0;
                        break;
                    }
                }
            }
            if (reduce > max)
            {
                max = reduce;
                result = initial[i];
            }
            else if (reduce == max)
            {
                result = min(initial[i], result);
            }
        }
        return result;
    }

private:
    unordered_set<int> dfs(int node, vector<bool> &visited, const vector<vector<int>> &graph)
    {
        if (visited[node])
            return {};
        unordered_set<int> result = {node};
        visited[node] = true;
        int n = graph.size();
        for (int i = 0; i < n; i++)
        {
            if (graph[node][i] == 1)
            {
                auto connectedNodes = dfs(i, visited, graph);
                result.insert(connectedNodes.begin(), connectedNodes.end());
            }
        }
        return result;
    }
};

class LeetCodeTest : public testing::Test
{
public:
    inline static Solution solution;
};

TEST_F(LeetCodeTest, Example1)
{
    vector<vector<int>> graph = {
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1},
    };
    vector<int> initial = {0, 1};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 0);
}

TEST_F(LeetCodeTest, Example2)
{
    vector<vector<int>> graph = {
        {1, 0, 0},
        {0, 1, 0},
        {0, 0, 1},
    };
    vector<int> initial = {0, 2};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 0);
}

TEST_F(LeetCodeTest, Example3)
{
    vector<vector<int>> graph = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1},
    };
    vector<int> initial = {1, 2};
    EXPECT_EQ(solution.minMalwareSpread(graph, initial), 1);
}