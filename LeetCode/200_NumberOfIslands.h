#pragma once
#include "Common.h"

class Solution
{
public:
    int numIslands(vector<vector<char>> &grid)
    {
        int result = 0;

        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[0].size(); j++)
            {
                if (identifyIland(grid, i, j))
                {
                    result++;
                }
            }
        }

        return result;
    }

private:
    bool identifyIland(vector<vector<char>> &grid, int i, int j)
    {
        if (grid[i][j] == '0' || grid[i][j] == '2')
        {
            return false;
        }

        queue<pair<int, int>> next;
        next.emplace(i, j);
        grid[i][j] = '2';
        while (!next.empty())
        {
            auto temp = next.front();
            next.pop();
            if (temp.first > 0 && grid[temp.first - 1][temp.second] == '1')
            {
                next.emplace(temp.first - 1, temp.second);
                grid[temp.first - 1][temp.second] = '2';
            }
            if (temp.second > 0 && grid[temp.first][temp.second - 1] == '1')
            {
                next.emplace(temp.first, temp.second - 1);
                grid[temp.first][temp.second - 1] = '2';
            }
            if (temp.first < grid.size() - 1 && grid[temp.first + 1][temp.second] == '1')
            {
                next.emplace(temp.first + 1, temp.second);
                grid[temp.first + 1][temp.second] = '2';
            }
            if (temp.second < grid[0].size() - 1 && grid[temp.first][temp.second + 1] == '1')
            {
                next.emplace(temp.first, temp.second + 1);
                grid[temp.first][temp.second + 1] = '2';
            }
        }
        return true;
    }
};

void Test()
{
    Solution solution;
    vector<vector<char>> grid;

    grid = {
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
        {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
        {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
        {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
        {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
    };
    assert(solution.numIslands(grid) == 1);
}
